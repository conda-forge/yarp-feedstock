{% set name = "yarp" %}
{% set namecxx = "libyarp" %}
{% set namepython = "yarp-python" %}
{% set version = "3.12.1" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/robotology/yarp/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 4239bc97a57a3da00bedec5405bf7188764a99d15befd8c85d7abf8ac59c9540
  patches:
    - 2983.patch
    - 3277.patch

build:
  number: 0
outputs:
  - name: {{ namecxx }}
    script: build_cxx.sh  # [unix]
    script: bld_cxx.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage(namecxx, max_pin='x.x.x') }}
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - cmake
        - pkg-config
        - ninja
        - multisheller
        - ycm-cmake-modules
        - bison  # [not win]
        - flex  # [not win]
      host:
        - ace
        - tinyxml
        - eigen
        - sdl
        - sqlite
        - libjpeg-turbo
        - bash-completion  # [not win]
        - libi2c  # [linux]
        - robot-testing-framework
        - libgl-devel  # [linux]
        - xorg-libxfixes  # [linux]
        - libpng
        - zlib
        - soxr
        - libedit  # [not win]
        - libopencv
        - portaudio
        - qt-main
        - ffmpeg

      run:
        # ycm and eigen are mentioned in the headers so needed when building
        # against libyarp
        - ycm-cmake-modules
        - eigen

    test:
      commands:
        - yarp help
        - test -f ${PREFIX}/include/yarp/os/all.h  # [not win]
        - test -f ${PREFIX}/include/yarp/cv/Cv.h  # [not win]
        - test -f ${PREFIX}/lib/libYARP_os.so  # [linux]
        - test -f ${PREFIX}/lib/libYARP_os.dylib  # [osx]
        - test -f ${PREFIX}/lib/cmake/YARP_os/YARP_osConfig.cmake  # [not win]
        - if not exist %PREFIX%\\Library\\include\\yarp\\os\\all.h exit 1  # [win]
        # Regression test for https://github.com/conda-forge/yarp-feedstock/issues/69
        - if not exist %PREFIX%\\Library\\include\\yarp\\cv\\Cv.h exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\YARP_os.lib exit 1  # [win]
        - if not exist %PREFIX%\\Library\\bin\\YARP_os.dll exit 1  # [win]
        - if not exist %PREFIX%\\Library\\lib\\cmake\\YARP_os\\YARP_osConfig.cmake exit 1  # [win]
        # Regression test for https://github.com/conda-forge/yarp-feedstock/issues/66
        - test -f ${PREFIX}/lib/yarp/yarp_pm_depthimage_compression_zlib.so  # [not win]
        - if not exist %PREFIX%\\Library\\lib\\yarp\\yarp_pm_depthimage_compression_zlib.dll exit 1  # [win]


  - name: {{ namepython }}
    script: build_py.sh  # [unix]
    script: bld_py.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - swig
        - ninja
        - cmake
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
      host:
        - {{ pin_subpackage(namecxx, exact=True) }}
        - python
        - openssl

      run:
        - {{ pin_subpackage(namecxx, exact=True) }}
        - python
        - numpy
    test:
      commands:
        - test $(pip list | grep yarp | tr -s " " | grep $PKG_VERSION | wc -l) -eq 1  # [unix]
        - pip check
      requires:
        - pip
      imports:
        - yarp

  - name: yarp-rerun
    script: build_rerun.sh  # [unix]
    script: bld_rerun.bat  # [win]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - ninja
        - cmake
      host:
        - {{ pin_subpackage(namecxx, exact=True) }}
        - librerun-sdk
      run:
        - {{ pin_subpackage(namecxx, exact=True) }}
    test:
      commands:
        - if not exist %PREFIX%\\Library\\bin\\yarpRerun.exe exit 1  # [win]
        - test -f ${PREFIX}/bin/yarpRerun  # [unix]

  - name: {{ name }}
    build:
      run_exports:
        - {{ pin_subpackage(namecxx, max_pin='x.x.x') }}
    requirements:
      run:
        - {{ pin_subpackage(namecxx, exact=True) }}
        - {{ pin_subpackage(namepython, max_pin='x.x.x') }}
        - {{ pin_subpackage('yarp-rerun', max_pin='x.x.x') }}
    test:
      imports:
        - yarp

  - name: yarp-cxx
    build:
      run_exports:
        - {{ pin_subpackage(namecxx, max_pin='x.x.x') }}
    requirements:
      run:
        - {{ pin_subpackage(namecxx, exact=True) }}
    test:
      commands:
        - yarp help

about:
  home: https://github.com/robotology/yarp
  license: BSD-3-Clause AND MIT AND GPL-3.0-or-later
  license_file:
    - COPYING
    - extern/thrift/LICENSES/BSD-3-Clause.txt
    - extern/dirent/dirent/LICENSE
  summary: YARP is a library and toolkit for communication and device interfaces, used on everything from humanoids to embedded devices.


extra:
  recipe-maintainers:
    - traversaro
